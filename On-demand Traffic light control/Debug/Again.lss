
Again.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002136  000021ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800168  00800168  000022d2  2**0
                  ALLOC
  3 .stab         00002250  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb3  00000000  00000000  00004524  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000054d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005677  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005869  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a1d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a686  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aff4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 72 08 	jmp	0x10e4	; 0x10e4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 36       	cpi	r26, 0x6F	; 111
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e3       	ldi	r30, 0x36	; 54
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <main>
      8a:	0c 94 99 10 	jmp	0x2132	; 0x2132 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 0a 10 	jmp	0x2014	; 0x2014 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer0Int>:
#include <math.h>

static void (*Timer0_pvCallBackFunc)(void) = NULL;


void Timer0Int(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	//TCCR0=0x00;  // normal mode
	CLR_BIT(TCCR0,TCCR0_WGM00);
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 7b       	andi	r24, 0xBF	; 191
     e42:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	8c 93       	st	X, r24

	TCNT0 =0X00; // timer set initial value
     e52:	e2 e5       	ldi	r30, 0x52	; 82
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	10 82       	st	Z, r1

}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <Timer0_mDelay>:

void Timer0_mDelay(u16 Copy_u16TimeInMSec){
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	60 97       	sbiw	r28, 0x10	; 16
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	98 8b       	std	Y+16, r25	; 0x10
     e7c:	8f 87       	std	Y+15, r24	; 0x0f

	u16 overflowCounter=0;
     e7e:	1e 86       	std	Y+14, r1	; 0x0e
     e80:	1d 86       	std	Y+13, r1	; 0x0d
	u16 Local_u16TotOverflows;
	u16 Local_u16PreloadValue;
	f32 Local_f32MaxDelay=0 ,Local_f32TickTime=0;
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 e0       	ldi	r26, 0x00	; 0
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	9e 83       	std	Y+6, r25	; 0x06
     e8e:	af 83       	std	Y+7, r26	; 0x07
     e90:	b8 87       	std	Y+8, r27	; 0x08
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	ab 83       	std	Y+3, r26	; 0x03
     ea0:	bc 83       	std	Y+4, r27	; 0x04

	TCCR0 |= (1<<0) | (1<<2); //start timer -> by setting prescaler value 1024
     ea2:	a3 e5       	ldi	r26, 0x53	; 83
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e3 e5       	ldi	r30, 0x53	; 83
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	85 60       	ori	r24, 0x05	; 5
     eae:	8c 93       	st	X, r24

	Local_f32TickTime = 1024.0 / 1000.0; // milLi second at Frequency 1MHZ & prescaler 1024
     eb0:	8f e6       	ldi	r24, 0x6F	; 111
     eb2:	92 e1       	ldi	r25, 0x12	; 18
     eb4:	a3 e8       	ldi	r26, 0x83	; 131
     eb6:	bf e3       	ldi	r27, 0x3F	; 63
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	ab 83       	std	Y+3, r26	; 0x03
     ebe:	bc 83       	std	Y+4, r27	; 0x04
	Local_f32MaxDelay = Local_f32TickTime * 256; // milli seconds (8-bit timer)
     ec0:	69 81       	ldd	r22, Y+1	; 0x01
     ec2:	7a 81       	ldd	r23, Y+2	; 0x02
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e8       	ldi	r20, 0x80	; 128
     ece:	53 e4       	ldi	r21, 0x43	; 67
     ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	8d 83       	std	Y+5, r24	; 0x05
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	af 83       	std	Y+7, r26	; 0x07
     ede:	b8 87       	std	Y+8, r27	; 0x08


	if(Copy_u16TimeInMSec < Local_f32MaxDelay)
     ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee2:	98 89       	ldd	r25, Y+16	; 0x10
     ee4:	cc 01       	movw	r24, r24
     ee6:	a0 e0       	ldi	r26, 0x00	; 0
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	2d 81       	ldd	r18, Y+5	; 0x05
     efc:	3e 81       	ldd	r19, Y+6	; 0x06
     efe:	4f 81       	ldd	r20, Y+7	; 0x07
     f00:	58 85       	ldd	r21, Y+8	; 0x08
     f02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f06:	88 23       	and	r24, r24
     f08:	54 f5       	brge	.+84     	; 0xf5e <Timer0_mDelay+0x100>
	{
		Local_u16PreloadValue = (Local_f32MaxDelay-Copy_u16TimeInMSec)/Local_f32TickTime;
     f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0c:	98 89       	ldd	r25, Y+16	; 0x10
     f0e:	cc 01       	movw	r24, r24
     f10:	a0 e0       	ldi	r26, 0x00	; 0
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	bc 01       	movw	r22, r24
     f16:	cd 01       	movw	r24, r26
     f18:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f1c:	9b 01       	movw	r18, r22
     f1e:	ac 01       	movw	r20, r24
     f20:	6d 81       	ldd	r22, Y+5	; 0x05
     f22:	7e 81       	ldd	r23, Y+6	; 0x06
     f24:	8f 81       	ldd	r24, Y+7	; 0x07
     f26:	98 85       	ldd	r25, Y+8	; 0x08
     f28:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	29 81       	ldd	r18, Y+1	; 0x01
     f36:	3a 81       	ldd	r19, Y+2	; 0x02
     f38:	4b 81       	ldd	r20, Y+3	; 0x03
     f3a:	5c 81       	ldd	r21, Y+4	; 0x04
     f3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	9a 87       	std	Y+10, r25	; 0x0a
     f52:	89 87       	std	Y+9, r24	; 0x09
		Local_u16TotOverflows = 1;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9c 87       	std	Y+12, r25	; 0x0c
     f5a:	8b 87       	std	Y+11, r24	; 0x0b
     f5c:	76 c0       	rjmp	.+236    	; 0x104a <Timer0_mDelay+0x1ec>

	}

	else if(Copy_u16TimeInMSec == (u32) Local_f32MaxDelay)
     f5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f60:	98 89       	ldd	r25, Y+16	; 0x10
     f62:	7c 01       	movw	r14, r24
     f64:	00 e0       	ldi	r16, 0x00	; 0
     f66:	10 e0       	ldi	r17, 0x00	; 0
     f68:	6d 81       	ldd	r22, Y+5	; 0x05
     f6a:	7e 81       	ldd	r23, Y+6	; 0x06
     f6c:	8f 81       	ldd	r24, Y+7	; 0x07
     f6e:	98 85       	ldd	r25, Y+8	; 0x08
     f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	e8 16       	cp	r14, r24
     f7a:	f9 06       	cpc	r15, r25
     f7c:	0a 07       	cpc	r16, r26
     f7e:	1b 07       	cpc	r17, r27
     f80:	39 f4       	brne	.+14     	; 0xf90 <Timer0_mDelay+0x132>
	{
		Local_u16PreloadValue=0;
     f82:	1a 86       	std	Y+10, r1	; 0x0a
     f84:	19 86       	std	Y+9, r1	; 0x09
		Local_u16TotOverflows=1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9c 87       	std	Y+12, r25	; 0x0c
     f8c:	8b 87       	std	Y+11, r24	; 0x0b
     f8e:	5d c0       	rjmp	.+186    	; 0x104a <Timer0_mDelay+0x1ec>
	}

	else
	{
		Local_u16TotOverflows = ceil((f32)Copy_u16TimeInMSec/Local_f32MaxDelay);
     f90:	8f 85       	ldd	r24, Y+15	; 0x0f
     f92:	98 89       	ldd	r25, Y+16	; 0x10
     f94:	cc 01       	movw	r24, r24
     f96:	a0 e0       	ldi	r26, 0x00	; 0
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	bc 01       	movw	r22, r24
     fa8:	cd 01       	movw	r24, r26
     faa:	2d 81       	ldd	r18, Y+5	; 0x05
     fac:	3e 81       	ldd	r19, Y+6	; 0x06
     fae:	4f 81       	ldd	r20, Y+7	; 0x07
     fb0:	58 85       	ldd	r21, Y+8	; 0x08
     fb2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 1d 10 	call	0x203a	; 0x203a <ceil>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	9c 87       	std	Y+12, r25	; 0x0c
     fd4:	8b 87       	std	Y+11, r24	; 0x0b
		Local_u16PreloadValue = 256 - ((f32)Copy_u16TimeInMSec/Local_f32TickTime)/Local_u16TotOverflows;
     fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd8:	98 89       	ldd	r25, Y+16	; 0x10
     fda:	cc 01       	movw	r24, r24
     fdc:	a0 e0       	ldi	r26, 0x00	; 0
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	bc 01       	movw	r22, r24
     fe2:	cd 01       	movw	r24, r26
     fe4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	bc 01       	movw	r22, r24
     fee:	cd 01       	movw	r24, r26
     ff0:	29 81       	ldd	r18, Y+1	; 0x01
     ff2:	3a 81       	ldd	r19, Y+2	; 0x02
     ff4:	4b 81       	ldd	r20, Y+3	; 0x03
     ff6:	5c 81       	ldd	r21, Y+4	; 0x04
     ff8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	7c 01       	movw	r14, r24
    1002:	8d 01       	movw	r16, r26
    1004:	8b 85       	ldd	r24, Y+11	; 0x0b
    1006:	9c 85       	ldd	r25, Y+12	; 0x0c
    1008:	cc 01       	movw	r24, r24
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1016:	9b 01       	movw	r18, r22
    1018:	ac 01       	movw	r20, r24
    101a:	c8 01       	movw	r24, r16
    101c:	b7 01       	movw	r22, r14
    101e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	9c 01       	movw	r18, r24
    1028:	ad 01       	movw	r20, r26
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	80 e8       	ldi	r24, 0x80	; 128
    1030:	93 e4       	ldi	r25, 0x43	; 67
    1032:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	bc 01       	movw	r22, r24
    103c:	cd 01       	movw	r24, r26
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9a 87       	std	Y+10, r25	; 0x0a
    1048:	89 87       	std	Y+9, r24	; 0x09

	}

	TCNT0 = Local_u16PreloadValue;
    104a:	e2 e5       	ldi	r30, 0x52	; 82
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	89 85       	ldd	r24, Y+9	; 0x09
    1050:	80 83       	st	Z, r24
    1052:	15 c0       	rjmp	.+42     	; 0x107e <Timer0_mDelay+0x220>

	while (overflowCounter < Local_u16TotOverflows){
		while (( TIFR & (1<<0) )==0 );
    1054:	e8 e5       	ldi	r30, 0x58	; 88
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	88 2f       	mov	r24, r24
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	81 70       	andi	r24, 0x01	; 1
    1060:	90 70       	andi	r25, 0x00	; 0
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	b9 f3       	breq	.-18     	; 0x1054 <Timer0_mDelay+0x1f6>
		TIFR |= (1<<0); //clear the overflow flag
    1066:	a8 e5       	ldi	r26, 0x58	; 88
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e8 e5       	ldi	r30, 0x58	; 88
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	81 60       	ori	r24, 0x01	; 1
    1072:	8c 93       	st	X, r24
		overflowCounter++;
    1074:	8d 85       	ldd	r24, Y+13	; 0x0d
    1076:	9e 85       	ldd	r25, Y+14	; 0x0e
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	9e 87       	std	Y+14, r25	; 0x0e
    107c:	8d 87       	std	Y+13, r24	; 0x0d

	}

	TCNT0 = Local_u16PreloadValue;

	while (overflowCounter < Local_u16TotOverflows){
    107e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1080:	3e 85       	ldd	r19, Y+14	; 0x0e
    1082:	8b 85       	ldd	r24, Y+11	; 0x0b
    1084:	9c 85       	ldd	r25, Y+12	; 0x0c
    1086:	28 17       	cp	r18, r24
    1088:	39 07       	cpc	r19, r25
    108a:	20 f3       	brcs	.-56     	; 0x1054 <Timer0_mDelay+0x1f6>
		while (( TIFR & (1<<0) )==0 );
		TIFR |= (1<<0); //clear the overflow flag
		overflowCounter++;
	}
	overflowCounter =0;
    108c:	1e 86       	std	Y+14, r1	; 0x0e
    108e:	1d 86       	std	Y+13, r1	; 0x0d
	//TCCR0 = 0x00; // timer stop


}
    1090:	60 96       	adiw	r28, 0x10	; 16
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	08 95       	ret

000010aa <Timer0_voidSetCallBack>:



u8 Timer0_voidSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <Timer0_voidSetCallBack+0x6>
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	9b 83       	std	Y+3, r25	; 0x03
    10b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ErrorState =OK;
    10ba:	19 82       	std	Y+1, r1	; 0x01
	if ( Copy_pvCallBackFunc != NULL){
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	9b 81       	ldd	r25, Y+3	; 0x03
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	39 f0       	breq	.+14     	; 0x10d2 <Timer0_voidSetCallBack+0x28>
		Timer0_pvCallBackFunc = Copy_pvCallBackFunc;
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	9b 81       	ldd	r25, Y+3	; 0x03
    10c8:	90 93 69 01 	sts	0x0169, r25
    10cc:	80 93 68 01 	sts	0x0168, r24
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <Timer0_voidSetCallBack+0x2c>
	}
	else{
		Local_ErrorState =NULL_POINTER;
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
    10d6:	89 81       	ldd	r24, Y+1	; 0x01

}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <__vector_11>:


void __vector_11 (void)     __attribute__((signal));
void __vector_11 (void)
{
    10e4:	1f 92       	push	r1
    10e6:	0f 92       	push	r0
    10e8:	0f b6       	in	r0, 0x3f	; 63
    10ea:	0f 92       	push	r0
    10ec:	11 24       	eor	r1, r1
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	if ( Timer0_pvCallBackFunc != NULL){
    110e:	80 91 68 01 	lds	r24, 0x0168
    1112:	90 91 69 01 	lds	r25, 0x0169
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	29 f0       	breq	.+10     	; 0x1124 <__vector_11+0x40>
		Timer0_pvCallBackFunc();
    111a:	e0 91 68 01 	lds	r30, 0x0168
    111e:	f0 91 69 01 	lds	r31, 0x0169
    1122:	09 95       	icall
	}
	else {
		/* Do Nothing*/
	}

}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	ff 91       	pop	r31
    112a:	ef 91       	pop	r30
    112c:	bf 91       	pop	r27
    112e:	af 91       	pop	r26
    1130:	9f 91       	pop	r25
    1132:	8f 91       	pop	r24
    1134:	7f 91       	pop	r23
    1136:	6f 91       	pop	r22
    1138:	5f 91       	pop	r21
    113a:	4f 91       	pop	r20
    113c:	3f 91       	pop	r19
    113e:	2f 91       	pop	r18
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	0f 90       	pop	r0
    1146:	1f 90       	pop	r1
    1148:	18 95       	reti

0000114a <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	DDRA= PORTA_DIR;
    1152:	ea e3       	ldi	r30, 0x3A	; 58
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	87 e0       	ldi	r24, 0x07	; 7
    1158:	80 83       	st	Z, r24
	DDRB= PORTB_DIR;
    115a:	e7 e3       	ldi	r30, 0x37	; 55
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	87 e0       	ldi	r24, 0x07	; 7
    1160:	80 83       	st	Z, r24
	DDRC= PORTC_DIR;
    1162:	e4 e3       	ldi	r30, 0x34	; 52
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	10 82       	st	Z, r1
	DDRD= PORTD_DIR;
    1168:	e1 e3       	ldi	r30, 0x31	; 49
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	10 82       	st	Z, r1
	
	PORTA=PORTA_INITIAL_VALUE;
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
    1174:	e8 e3       	ldi	r30, 0x38	; 56
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
    117a:	e5 e3       	ldi	r30, 0x35	; 53
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	10 82       	st	Z, r1
	PORTD=PORTD_INITIAL_VALUE;
    1180:	e2 e3       	ldi	r30, 0x32	; 50
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	84 e0       	ldi	r24, 0x04	; 4
    1186:	80 83       	st	Z, r24
}
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <GIE_voidEnableGlobal>:
#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"


void GIE_voidEnableGlobal(void)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1196:	af e5       	ldi	r26, 0x5F	; 95
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ef e5       	ldi	r30, 0x5F	; 95
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	80 68       	ori	r24, 0x80	; 128
    11a2:	8c 93       	st	X, r24
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    11b2:	af e5       	ldi	r26, 0x5F	; 95
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ef e5       	ldi	r30, 0x5F	; 95
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8f 77       	andi	r24, 0x7F	; 127
    11be:	8c 93       	st	X, r24
}
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <EXTI_voidINT0Init>:

/*Define Global array of 3 pointers to functions to carry ISR application addresses*/
static void (*EXTI_pvINTCallBackFunc)(void)= NULL;

void EXTI_voidINT0Init(void)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
#elif EXTI_INT0_SENSE == ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif EXTI_INT0_SENSE == FALLING_EDGE
	CLR_BIT(MCUCR,MCUCR_ISC00);
    11ce:	a5 e5       	ldi	r26, 0x55	; 85
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e5 e5       	ldi	r30, 0x55	; 85
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8e 7f       	andi	r24, 0xFE	; 254
    11da:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    11dc:	a5 e5       	ldi	r26, 0x55	; 85
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e5 e5       	ldi	r30, 0x55	; 85
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	82 60       	ori	r24, 0x02	; 2
    11e8:	8c 93       	st	X, r24
#error "Wrong EXTI_INT0_SENSE configuration option"
#endif

	/*Check INT0 PIE initial state*/
#if EXTI_INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
    11ea:	ab e5       	ldi	r26, 0x5B	; 91
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	eb e5       	ldi	r30, 0x5B	; 91
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 64       	ori	r24, 0x40	; 64
    11f6:	8c 93       	st	X, r24
#elif EXTI_INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error " Wrong EXTI_INT0_INITIAL_STATE configuration option"
#endif
}
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <EXTI_u8SetSenseControl>:

u8 EXTI_u8SetSenseControl(u8 Copy_u8Sense)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <EXTI_u8SetSenseControl+0x6>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <EXTI_u8SetSenseControl+0x8>
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState= OK;
    120c:	19 82       	std	Y+1, r1	; 0x01

	 		/*In case INT0*/
		switch(Copy_u8Sense)
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	3c 83       	std	Y+4, r19	; 0x04
    1216:	2b 83       	std	Y+3, r18	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	91 05       	cpc	r25, r1
    1220:	29 f1       	breq	.+74     	; 0x126c <EXTI_u8SetSenseControl+0x6e>
    1222:	2b 81       	ldd	r18, Y+3	; 0x03
    1224:	3c 81       	ldd	r19, Y+4	; 0x04
    1226:	23 30       	cpi	r18, 0x03	; 3
    1228:	31 05       	cpc	r19, r1
    122a:	34 f4       	brge	.+12     	; 0x1238 <EXTI_u8SetSenseControl+0x3a>
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	61 f0       	breq	.+24     	; 0x124e <EXTI_u8SetSenseControl+0x50>
    1236:	47 c0       	rjmp	.+142    	; 0x12c6 <EXTI_u8SetSenseControl+0xc8>
    1238:	2b 81       	ldd	r18, Y+3	; 0x03
    123a:	3c 81       	ldd	r19, Y+4	; 0x04
    123c:	23 30       	cpi	r18, 0x03	; 3
    123e:	31 05       	cpc	r19, r1
    1240:	21 f1       	breq	.+72     	; 0x128a <EXTI_u8SetSenseControl+0x8c>
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	91 05       	cpc	r25, r1
    124a:	71 f1       	breq	.+92     	; 0x12a8 <EXTI_u8SetSenseControl+0xaa>
    124c:	3c c0       	rjmp	.+120    	; 0x12c6 <EXTI_u8SetSenseControl+0xc8>
		{
		case LOW_LEVEL:   CLR_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    124e:	a5 e5       	ldi	r26, 0x55	; 85
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e5       	ldi	r30, 0x55	; 85
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8e 7f       	andi	r24, 0xFE	; 254
    125a:	8c 93       	st	X, r24
    125c:	a5 e5       	ldi	r26, 0x55	; 85
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e5 e5       	ldi	r30, 0x55	; 85
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8d 7f       	andi	r24, 0xFD	; 253
    1268:	8c 93       	st	X, r24
    126a:	2f c0       	rjmp	.+94     	; 0x12ca <EXTI_u8SetSenseControl+0xcc>
		case ON_CHANGE:   SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01); break;
    126c:	a5 e5       	ldi	r26, 0x55	; 85
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e5 e5       	ldi	r30, 0x55	; 85
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	81 60       	ori	r24, 0x01	; 1
    1278:	8c 93       	st	X, r24
    127a:	a5 e5       	ldi	r26, 0x55	; 85
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e5 e5       	ldi	r30, 0x55	; 85
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8d 7f       	andi	r24, 0xFD	; 253
    1286:	8c 93       	st	X, r24
    1288:	20 c0       	rjmp	.+64     	; 0x12ca <EXTI_u8SetSenseControl+0xcc>
		case FALLING_EDGE:CLR_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    128a:	a5 e5       	ldi	r26, 0x55	; 85
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e5 e5       	ldi	r30, 0x55	; 85
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8e 7f       	andi	r24, 0xFE	; 254
    1296:	8c 93       	st	X, r24
    1298:	a5 e5       	ldi	r26, 0x55	; 85
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e5 e5       	ldi	r30, 0x55	; 85
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	82 60       	ori	r24, 0x02	; 2
    12a4:	8c 93       	st	X, r24
    12a6:	11 c0       	rjmp	.+34     	; 0x12ca <EXTI_u8SetSenseControl+0xcc>
		case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC00); SET_BIT(MCUCR,MCUCR_ISC01); break;
    12a8:	a5 e5       	ldi	r26, 0x55	; 85
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e5 e5       	ldi	r30, 0x55	; 85
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	81 60       	ori	r24, 0x01	; 1
    12b4:	8c 93       	st	X, r24
    12b6:	a5 e5       	ldi	r26, 0x55	; 85
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e5 e5       	ldi	r30, 0x55	; 85
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	82 60       	ori	r24, 0x02	; 2
    12c2:	8c 93       	st	X, r24
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <EXTI_u8SetSenseControl+0xcc>
		default: Local_u8ErrorState = NOK;			break;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	89 83       	std	Y+1, r24	; 0x01
		}
		/*Break INT0 case*/


	return Local_u8ErrorState;
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <EXTI_u8INT0SetCallBack>:

u8 EXTI_u8INT0SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <EXTI_u8INT0SetCallBack+0x6>
    12e0:	0f 92       	push	r0
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	9b 83       	std	Y+3, r25	; 0x03
    12e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    12ea:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	9b 81       	ldd	r25, Y+3	; 0x03
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	39 f0       	breq	.+14     	; 0x1302 <EXTI_u8INT0SetCallBack+0x28>
	{
		EXTI_pvINTCallBackFunc = Copy_pvCallBackFunc;
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	9b 81       	ldd	r25, Y+3	; 0x03
    12f8:	90 93 6b 01 	sts	0x016B, r25
    12fc:	80 93 6a 01 	sts	0x016A, r24
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <EXTI_u8INT0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1306:	89 81       	ldd	r24, Y+1	; 0x01
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <__vector_1>:

/*ISR of INT0*/
void  __vector_1 (void)	__attribute__((signal));
void  __vector_1 (void)
{
    1314:	1f 92       	push	r1
    1316:	0f 92       	push	r0
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	0f 92       	push	r0
    131c:	11 24       	eor	r1, r1
    131e:	2f 93       	push	r18
    1320:	3f 93       	push	r19
    1322:	4f 93       	push	r20
    1324:	5f 93       	push	r21
    1326:	6f 93       	push	r22
    1328:	7f 93       	push	r23
    132a:	8f 93       	push	r24
    132c:	9f 93       	push	r25
    132e:	af 93       	push	r26
    1330:	bf 93       	push	r27
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINTCallBackFunc != NULL)
    133e:	80 91 6a 01 	lds	r24, 0x016A
    1342:	90 91 6b 01 	lds	r25, 0x016B
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	29 f0       	breq	.+10     	; 0x1354 <__vector_1+0x40>
	{
		EXTI_pvINTCallBackFunc ();
    134a:	e0 91 6a 01 	lds	r30, 0x016A
    134e:	f0 91 6b 01 	lds	r31, 0x016B
    1352:	09 95       	icall
	{
		/*Do nothing*/
	}


}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	ff 91       	pop	r31
    135a:	ef 91       	pop	r30
    135c:	bf 91       	pop	r27
    135e:	af 91       	pop	r26
    1360:	9f 91       	pop	r25
    1362:	8f 91       	pop	r24
    1364:	7f 91       	pop	r23
    1366:	6f 91       	pop	r22
    1368:	5f 91       	pop	r21
    136a:	4f 91       	pop	r20
    136c:	3f 91       	pop	r19
    136e:	2f 91       	pop	r18
    1370:	0f 90       	pop	r0
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	0f 90       	pop	r0
    1376:	1f 90       	pop	r1
    1378:	18 95       	reti

0000137a <DIO_u8TogglePin>:

#include "DIO_interface.h"
#include "DIO_register.h"

u8 DIO_u8TogglePin(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <DIO_u8TogglePin+0x6>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <DIO_u8TogglePin+0x8>
    1382:	0f 92       	push	r0
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	8a 83       	std	Y+2, r24	; 0x02
    138a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    138c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	3d 83       	std	Y+5, r19	; 0x05
    1396:	2c 83       	std	Y+4, r18	; 0x04
    1398:	8c 81       	ldd	r24, Y+4	; 0x04
    139a:	9d 81       	ldd	r25, Y+5	; 0x05
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	91 05       	cpc	r25, r1
    13a0:	49 f1       	breq	.+82     	; 0x13f4 <DIO_u8TogglePin+0x7a>
    13a2:	2c 81       	ldd	r18, Y+4	; 0x04
    13a4:	3d 81       	ldd	r19, Y+5	; 0x05
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	2c f4       	brge	.+10     	; 0x13b6 <DIO_u8TogglePin+0x3c>
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	61 f0       	breq	.+24     	; 0x13cc <DIO_u8TogglePin+0x52>
    13b4:	5b c0       	rjmp	.+182    	; 0x146c <DIO_u8TogglePin+0xf2>
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	71 f1       	breq	.+92     	; 0x141c <DIO_u8TogglePin+0xa2>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	83 30       	cpi	r24, 0x03	; 3
    13c6:	91 05       	cpc	r25, r1
    13c8:	e9 f1       	breq	.+122    	; 0x1444 <DIO_u8TogglePin+0xca>
    13ca:	50 c0       	rjmp	.+160    	; 0x146c <DIO_u8TogglePin+0xf2>
				{
				case DIO_u8PORTA: TOGGLE_BIT(PORTA,Copy_u8Pin); break;
    13cc:	ab e3       	ldi	r26, 0x3B	; 59
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	eb e3       	ldi	r30, 0x3B	; 59
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_u8TogglePin+0x70>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_u8TogglePin+0x6c>
    13ee:	84 27       	eor	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	3e c0       	rjmp	.+124    	; 0x1470 <DIO_u8TogglePin+0xf6>
				case DIO_u8PORTB: TOGGLE_BIT(PORTB,Copy_u8Pin); break;
    13f4:	a8 e3       	ldi	r26, 0x38	; 56
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e8 e3       	ldi	r30, 0x38	; 56
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_u8TogglePin+0x98>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_u8TogglePin+0x94>
    1416:	84 27       	eor	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	2a c0       	rjmp	.+84     	; 0x1470 <DIO_u8TogglePin+0xf6>
				case DIO_u8PORTC: TOGGLE_BIT(PORTC,Copy_u8Pin); break;
    141c:	a5 e3       	ldi	r26, 0x35	; 53
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e3       	ldi	r30, 0x35	; 53
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_u8TogglePin+0xc0>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_u8TogglePin+0xbc>
    143e:	84 27       	eor	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	16 c0       	rjmp	.+44     	; 0x1470 <DIO_u8TogglePin+0xf6>
				case DIO_u8PORTD: TOGGLE_BIT(PORTD,Copy_u8Pin); break;
    1444:	a2 e3       	ldi	r26, 0x32	; 50
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e2 e3       	ldi	r30, 0x32	; 50
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_u8TogglePin+0xe8>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_u8TogglePin+0xe4>
    1466:	84 27       	eor	r24, r20
    1468:	8c 93       	st	X, r24
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_u8TogglePin+0xf6>
				default: Local_u8ErrorState=NOK; break;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	89 83       	std	Y+1, r24	; 0x01
				}
	return Local_u8ErrorState;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	28 97       	sbiw	r28, 0x08	; 8
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	8a 83       	std	Y+2, r24	; 0x02
    1498:	6b 83       	std	Y+3, r22	; 0x03
    149a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    149c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <DIO_u8SetPinValue+0x24>
    14a4:	f4 c0       	rjmp	.+488    	; 0x168e <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_LOW)
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	88 23       	and	r24, r24
    14aa:	09 f0       	breq	.+2      	; 0x14ae <DIO_u8SetPinValue+0x2c>
    14ac:	77 c0       	rjmp	.+238    	; 0x159c <DIO_u8SetPinValue+0x11a>
		{
			switch(Copy_u8Port)
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	38 87       	std	Y+8, r19	; 0x08
    14b6:	2f 83       	std	Y+7, r18	; 0x07
    14b8:	8f 81       	ldd	r24, Y+7	; 0x07
    14ba:	98 85       	ldd	r25, Y+8	; 0x08
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	91 05       	cpc	r25, r1
    14c0:	59 f1       	breq	.+86     	; 0x1518 <DIO_u8SetPinValue+0x96>
    14c2:	2f 81       	ldd	r18, Y+7	; 0x07
    14c4:	38 85       	ldd	r19, Y+8	; 0x08
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	2c f4       	brge	.+10     	; 0x14d6 <DIO_u8SetPinValue+0x54>
    14cc:	8f 81       	ldd	r24, Y+7	; 0x07
    14ce:	98 85       	ldd	r25, Y+8	; 0x08
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	69 f0       	breq	.+26     	; 0x14ee <DIO_u8SetPinValue+0x6c>
    14d4:	60 c0       	rjmp	.+192    	; 0x1596 <DIO_u8SetPinValue+0x114>
    14d6:	2f 81       	ldd	r18, Y+7	; 0x07
    14d8:	38 85       	ldd	r19, Y+8	; 0x08
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	89 f1       	breq	.+98     	; 0x1542 <DIO_u8SetPinValue+0xc0>
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	91 05       	cpc	r25, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <DIO_u8SetPinValue+0x6a>
    14ea:	40 c0       	rjmp	.+128    	; 0x156c <DIO_u8SetPinValue+0xea>
    14ec:	54 c0       	rjmp	.+168    	; 0x1596 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    14ee:	ab e3       	ldi	r26, 0x3B	; 59
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	eb e3       	ldi	r30, 0x3B	; 59
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <DIO_u8SetPinValue+0x8a>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <DIO_u8SetPinValue+0x86>
    1510:	80 95       	com	r24
    1512:	84 23       	and	r24, r20
    1514:	8c 93       	st	X, r24
    1516:	bd c0       	rjmp	.+378    	; 0x1692 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1518:	a8 e3       	ldi	r26, 0x38	; 56
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e8 e3       	ldi	r30, 0x38	; 56
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_u8SetPinValue+0xb4>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_u8SetPinValue+0xb0>
    153a:	80 95       	com	r24
    153c:	84 23       	and	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	a8 c0       	rjmp	.+336    	; 0x1692 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1542:	a5 e3       	ldi	r26, 0x35	; 53
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_u8SetPinValue+0xde>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_u8SetPinValue+0xda>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
    156a:	93 c0       	rjmp	.+294    	; 0x1692 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    156c:	a2 e3       	ldi	r26, 0x32	; 50
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e2 e3       	ldi	r30, 0x32	; 50
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_u8SetPinValue+0x108>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_u8SetPinValue+0x104>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	7e c0       	rjmp	.+252    	; 0x1692 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK; break;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	7b c0       	rjmp	.+246    	; 0x1692 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_HIGH)
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <DIO_u8SetPinValue+0x122>
    15a2:	72 c0       	rjmp	.+228    	; 0x1688 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	3e 83       	std	Y+6, r19	; 0x06
    15ac:	2d 83       	std	Y+5, r18	; 0x05
    15ae:	8d 81       	ldd	r24, Y+5	; 0x05
    15b0:	9e 81       	ldd	r25, Y+6	; 0x06
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 05       	cpc	r25, r1
    15b6:	49 f1       	breq	.+82     	; 0x160a <DIO_u8SetPinValue+0x188>
    15b8:	2d 81       	ldd	r18, Y+5	; 0x05
    15ba:	3e 81       	ldd	r19, Y+6	; 0x06
    15bc:	22 30       	cpi	r18, 0x02	; 2
    15be:	31 05       	cpc	r19, r1
    15c0:	2c f4       	brge	.+10     	; 0x15cc <DIO_u8SetPinValue+0x14a>
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	61 f0       	breq	.+24     	; 0x15e2 <DIO_u8SetPinValue+0x160>
    15ca:	5b c0       	rjmp	.+182    	; 0x1682 <DIO_u8SetPinValue+0x200>
    15cc:	2d 81       	ldd	r18, Y+5	; 0x05
    15ce:	3e 81       	ldd	r19, Y+6	; 0x06
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	71 f1       	breq	.+92     	; 0x1632 <DIO_u8SetPinValue+0x1b0>
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	e9 f1       	breq	.+122    	; 0x165a <DIO_u8SetPinValue+0x1d8>
    15e0:	50 c0       	rjmp	.+160    	; 0x1682 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    15e2:	ab e3       	ldi	r26, 0x3B	; 59
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	eb e3       	ldi	r30, 0x3B	; 59
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_u8SetPinValue+0x17e>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_u8SetPinValue+0x17a>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	44 c0       	rjmp	.+136    	; 0x1692 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    160a:	a8 e3       	ldi	r26, 0x38	; 56
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e8 e3       	ldi	r30, 0x38	; 56
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_u8SetPinValue+0x1a6>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_u8SetPinValue+0x1a2>
    162c:	84 2b       	or	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	30 c0       	rjmp	.+96     	; 0x1692 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1632:	a5 e3       	ldi	r26, 0x35	; 53
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e3       	ldi	r30, 0x35	; 53
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_u8SetPinValue+0x1ce>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_u8SetPinValue+0x1ca>
    1654:	84 2b       	or	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	1c c0       	rjmp	.+56     	; 0x1692 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    165a:	a2 e3       	ldi	r26, 0x32	; 50
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e2 e3       	ldi	r30, 0x32	; 50
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_u8SetPinValue+0x1f6>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_u8SetPinValue+0x1f2>
    167c:	84 2b       	or	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=NOK; break;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1692:	89 81       	ldd	r24, Y+1	; 0x01
}
    1694:	28 96       	adiw	r28, 0x08	; 8
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <DIO_u8GetPinValue+0x6>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <DIO_u8GetPinValue+0x8>
    16ae:	0f 92       	push	r0
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	8a 83       	std	Y+2, r24	; 0x02
    16b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Value=0;
    16b8:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_u8Pin<= DIO_u8PIN7))
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	88 30       	cpi	r24, 0x08	; 8
    16be:	08 f0       	brcs	.+2      	; 0x16c2 <DIO_u8GetPinValue+0x1c>
    16c0:	67 c0       	rjmp	.+206    	; 0x1790 <DIO_u8GetPinValue+0xea>
	{
		switch(Copy_u8Port)
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	3d 83       	std	Y+5, r19	; 0x05
    16ca:	2c 83       	std	Y+4, r18	; 0x04
    16cc:	4c 81       	ldd	r20, Y+4	; 0x04
    16ce:	5d 81       	ldd	r21, Y+5	; 0x05
    16d0:	41 30       	cpi	r20, 0x01	; 1
    16d2:	51 05       	cpc	r21, r1
    16d4:	41 f1       	breq	.+80     	; 0x1726 <DIO_u8GetPinValue+0x80>
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	9d 81       	ldd	r25, Y+5	; 0x05
    16da:	82 30       	cpi	r24, 0x02	; 2
    16dc:	91 05       	cpc	r25, r1
    16de:	34 f4       	brge	.+12     	; 0x16ec <DIO_u8GetPinValue+0x46>
    16e0:	2c 81       	ldd	r18, Y+4	; 0x04
    16e2:	3d 81       	ldd	r19, Y+5	; 0x05
    16e4:	21 15       	cp	r18, r1
    16e6:	31 05       	cpc	r19, r1
    16e8:	61 f0       	breq	.+24     	; 0x1702 <DIO_u8GetPinValue+0x5c>
    16ea:	52 c0       	rjmp	.+164    	; 0x1790 <DIO_u8GetPinValue+0xea>
    16ec:	4c 81       	ldd	r20, Y+4	; 0x04
    16ee:	5d 81       	ldd	r21, Y+5	; 0x05
    16f0:	42 30       	cpi	r20, 0x02	; 2
    16f2:	51 05       	cpc	r21, r1
    16f4:	51 f1       	breq	.+84     	; 0x174a <DIO_u8GetPinValue+0xa4>
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	83 30       	cpi	r24, 0x03	; 3
    16fc:	91 05       	cpc	r25, r1
    16fe:	b9 f1       	breq	.+110    	; 0x176e <DIO_u8GetPinValue+0xc8>
    1700:	47 c0       	rjmp	.+142    	; 0x1790 <DIO_u8GetPinValue+0xea>
		{
		case DIO_u8PORTA: Local_u8Value= GET_BIT(PINA,Copy_u8Pin); break;
    1702:	e9 e3       	ldi	r30, 0x39	; 57
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a9 01       	movw	r20, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_u8GetPinValue+0x74>
    1716:	55 95       	asr	r21
    1718:	47 95       	ror	r20
    171a:	8a 95       	dec	r24
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_u8GetPinValue+0x70>
    171e:	ca 01       	movw	r24, r20
    1720:	81 70       	andi	r24, 0x01	; 1
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	35 c0       	rjmp	.+106    	; 0x1790 <DIO_u8GetPinValue+0xea>
		case DIO_u8PORTB: Local_u8Value= GET_BIT(PINB,Copy_u8Pin); break;
    1726:	e6 e3       	ldi	r30, 0x36	; 54
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a9 01       	movw	r20, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <DIO_u8GetPinValue+0x98>
    173a:	55 95       	asr	r21
    173c:	47 95       	ror	r20
    173e:	8a 95       	dec	r24
    1740:	e2 f7       	brpl	.-8      	; 0x173a <DIO_u8GetPinValue+0x94>
    1742:	ca 01       	movw	r24, r20
    1744:	81 70       	andi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	23 c0       	rjmp	.+70     	; 0x1790 <DIO_u8GetPinValue+0xea>
		case DIO_u8PORTC: Local_u8Value= GET_BIT(PINC,Copy_u8Pin); break;
    174a:	e3 e3       	ldi	r30, 0x33	; 51
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a9 01       	movw	r20, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_u8GetPinValue+0xbc>
    175e:	55 95       	asr	r21
    1760:	47 95       	ror	r20
    1762:	8a 95       	dec	r24
    1764:	e2 f7       	brpl	.-8      	; 0x175e <DIO_u8GetPinValue+0xb8>
    1766:	ca 01       	movw	r24, r20
    1768:	81 70       	andi	r24, 0x01	; 1
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	11 c0       	rjmp	.+34     	; 0x1790 <DIO_u8GetPinValue+0xea>
		case DIO_u8PORTD: Local_u8Value= GET_BIT(PIND,Copy_u8Pin); break;
    176e:	e0 e3       	ldi	r30, 0x30	; 48
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a9 01       	movw	r20, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <DIO_u8GetPinValue+0xe0>
    1782:	55 95       	asr	r21
    1784:	47 95       	ror	r20
    1786:	8a 95       	dec	r24
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <DIO_u8GetPinValue+0xdc>
    178a:	ca 01       	movw	r24, r20
    178c:	81 70       	andi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
		default:  break;
		}
	}

	return Local_u8Value;
    1790:	89 81       	ldd	r24, Y+1	; 0x01
}
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <LED_u8TurnOffLed>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "../../MCAL/PORT/PORT_interface.h"
#include"LED_interface.h"
#include"LED_config.h"

u8 LED_u8TurnOffLed(u8 Copy_u8LEDPort , u8 Copy_u8LEDPin){
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <LED_u8TurnOffLed+0x6>
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	8a 83       	std	Y+2, r24	; 0x02
    17b0:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Status = OK;
    17b2:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8LEDPort >= DIO_u8PORTA && Copy_u8LEDPort <= DIO_u8PORTD )||(Copy_u8LEDPin >= DIO_u8PIN0 && Copy_u8LEDPin <= DIO_u8PIN7 ))
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	84 30       	cpi	r24, 0x04	; 4
    17b8:	18 f0       	brcs	.+6      	; 0x17c0 <LED_u8TurnOffLed+0x1e>
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	88 30       	cpi	r24, 0x08	; 8
    17be:	30 f4       	brcc	.+12     	; 0x17cc <LED_u8TurnOffLed+0x2a>
	{
		DIO_u8SetPinValue(Copy_u8LEDPort,Copy_u8LEDPin,DIO_u8PIN_LOW);
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	6b 81       	ldd	r22, Y+3	; 0x03
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	0e 94 41 0a 	call	0x1482	; 0x1482 <DIO_u8SetPinValue>
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <LED_u8TurnOffLed+0x2e>
	}
	else
	{
		Local_u8Status = NOK ;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Status;
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <LED_u8TurnOnLed>:


u8 LED_u8TurnOnLed(u8 Copy_u8LEDPort , u8 Copy_u8LEDPin){
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <LED_u8TurnOnLed+0x6>
    17e4:	0f 92       	push	r0
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	8a 83       	std	Y+2, r24	; 0x02
    17ec:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Status = OK;
    17ee:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8LEDPort >= DIO_u8PORTA && Copy_u8LEDPort <= DIO_u8PORTD )||(Copy_u8LEDPin >= DIO_u8PIN0 && Copy_u8LEDPin <= DIO_u8PIN7 ))
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	84 30       	cpi	r24, 0x04	; 4
    17f4:	18 f0       	brcs	.+6      	; 0x17fc <LED_u8TurnOnLed+0x1e>
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	88 30       	cpi	r24, 0x08	; 8
    17fa:	30 f4       	brcc	.+12     	; 0x1808 <LED_u8TurnOnLed+0x2a>
	{
		DIO_u8SetPinValue(Copy_u8LEDPort,Copy_u8LEDPin,DIO_u8PIN_HIGH);
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	6b 81       	ldd	r22, Y+3	; 0x03
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	0e 94 41 0a 	call	0x1482	; 0x1482 <DIO_u8SetPinValue>
    1806:	02 c0       	rjmp	.+4      	; 0x180c <LED_u8TurnOnLed+0x2e>
	}
	else
	{
		Local_u8Status = NOK ;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Status;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <LED_u8ToggleLed>:


u8 LED_u8ToggleLed(u8 Copy_u8LEDPort , u8 Copy_u8LEDPin){
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <LED_u8ToggleLed+0x6>
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	8a 83       	std	Y+2, r24	; 0x02
    1828:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Status = OK;
    182a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8LEDPort >= DIO_u8PORTA && Copy_u8LEDPort <= DIO_u8PORTD )||(Copy_u8LEDPin >= DIO_u8PIN0 && Copy_u8LEDPin <= DIO_u8PIN7 ))
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	84 30       	cpi	r24, 0x04	; 4
    1830:	18 f0       	brcs	.+6      	; 0x1838 <LED_u8ToggleLed+0x1e>
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	88 30       	cpi	r24, 0x08	; 8
    1836:	28 f4       	brcc	.+10     	; 0x1842 <LED_u8ToggleLed+0x28>
	{
		DIO_u8TogglePin(Copy_u8LEDPort,Copy_u8LEDPin);
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	6b 81       	ldd	r22, Y+3	; 0x03
    183c:	0e 94 bd 09 	call	0x137a	; 0x137a <DIO_u8TogglePin>
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <LED_u8ToggleLed+0x2c>
	}
	else
	{
		Local_u8Status = NOK ;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Status;
    1846:	89 81       	ldd	r24, Y+1	; 0x01


}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <AppInit>:
static u8 RedLedState =TurnOFF;


/**********************************************************************************/
/* 		Description     : A function to initialize the application               	  */
void AppInit(void){
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    185c:	0e 94 a5 08 	call	0x114a	; 0x114a <PORT_voidInit>
	EXTI_voidINT0Init();
    1860:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <EXTI_voidINT0Init>
	GIE_voidEnableGlobal();
    1864:	0e 94 c7 08 	call	0x118e	; 0x118e <GIE_voidEnableGlobal>
	Timer0Int();
    1868:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer0Int>
	EXTI_u8INT0SetCallBack(&APP_voidNormalHumanMode);
    186c:	82 e1       	ldi	r24, 0x12	; 18
    186e:	9d e0       	ldi	r25, 0x0D	; 13
    1870:	0e 94 6d 09 	call	0x12da	; 0x12da <EXTI_u8INT0SetCallBack>
}
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <AppStart>:
/**********************************************************************************/


/**********************************************************************************/
/* 		Description     : A function to start the application               	  */
void AppStart(void){
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
	APP_voidNormalCarMode();
    1882:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <APP_voidNormalCarMode>
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <APP_voidBlinkYellowCarLed>:
/**********************************************************************************/

/**********************************************************************************/
/* 		Description     : A function to blink yellow led of car traffic light	  */
void APP_voidBlinkYellowCarLed(void){
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62

	/* Set Car Yellow LED Current State */
	YellowLedState = TurnON;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	80 93 6c 01 	sts	0x016C, r24

	/* Blink Yellow Led of Car Traffic for 5 Secs */
	for(u8 Local_u8SecCounter = 0 ; Local_u8SecCounter < 5 ; Local_u8SecCounter++)
    189c:	19 82       	std	Y+1, r1	; 0x01
    189e:	13 c0       	rjmp	.+38     	; 0x18c6 <APP_voidBlinkYellowCarLed+0x3a>
	{
		LED_u8TurnOnLed(CAR_LED_PORT , CAR_LED_YELLOW);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	0e 94 ef 0b 	call	0x17de	; 0x17de <LED_u8TurnOnLed>
		Timer0_mDelay(500);
    18a8:	84 ef       	ldi	r24, 0xF4	; 244
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timer0_mDelay>
		LED_u8TurnOffLed(CAR_LED_PORT , CAR_LED_YELLOW);
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LED_u8TurnOffLed>
		Timer0_mDelay(500);
    18b8:	84 ef       	ldi	r24, 0xF4	; 244
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timer0_mDelay>

	/* Set Car Yellow LED Current State */
	YellowLedState = TurnON;

	/* Blink Yellow Led of Car Traffic for 5 Secs */
	for(u8 Local_u8SecCounter = 0 ; Local_u8SecCounter < 5 ; Local_u8SecCounter++)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	8f 5f       	subi	r24, 0xFF	; 255
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	85 30       	cpi	r24, 0x05	; 5
    18ca:	50 f3       	brcs	.-44     	; 0x18a0 <APP_voidBlinkYellowCarLed+0x14>
		Timer0_mDelay(500);
		LED_u8TurnOffLed(CAR_LED_PORT , CAR_LED_YELLOW);
		Timer0_mDelay(500);
	}
	/* Set Car Yellow LED Current State */
	YellowLedState = TurnOFF;
    18cc:	10 92 6c 01 	sts	0x016C, r1
}
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <APP_voidBlinkYellowCarAndHumanLed>:


/**********************************************************************************/
/* Description     : A function to blink yellow led of both car and pedestrians   */
void APP_voidBlinkYellowCarAndHumanLed(void)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	0f 92       	push	r0
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
	/* Blink Yellow Led of Car Traffic for 5 Secs */
	for(u8 Local_u8SecCounter = 0 ; Local_u8SecCounter < 5 ; Local_u8SecCounter++)
    18e2:	19 82       	std	Y+1, r1	; 0x01
    18e4:	1b c0       	rjmp	.+54     	; 0x191c <APP_voidBlinkYellowCarAndHumanLed+0x44>
	{
		LED_u8TurnOnLed(CAR_LED_PORT , CAR_LED_YELLOW);
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	0e 94 ef 0b 	call	0x17de	; 0x17de <LED_u8TurnOnLed>
		LED_u8TurnOnLed(HUMAN_LED_PORT , HUMAN_LED_YELLOW);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	0e 94 ef 0b 	call	0x17de	; 0x17de <LED_u8TurnOnLed>
		Timer0_mDelay(500);
    18f6:	84 ef       	ldi	r24, 0xF4	; 244
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timer0_mDelay>
		LED_u8TurnOffLed(CAR_LED_PORT , CAR_LED_YELLOW);
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	61 e0       	ldi	r22, 0x01	; 1
    1902:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LED_u8TurnOffLed>
		LED_u8TurnOffLed(HUMAN_LED_PORT , HUMAN_LED_YELLOW);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LED_u8TurnOffLed>
		Timer0_mDelay(500);
    190e:	84 ef       	ldi	r24, 0xF4	; 244
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timer0_mDelay>
/**********************************************************************************/
/* Description     : A function to blink yellow led of both car and pedestrians   */
void APP_voidBlinkYellowCarAndHumanLed(void)
{
	/* Blink Yellow Led of Car Traffic for 5 Secs */
	for(u8 Local_u8SecCounter = 0 ; Local_u8SecCounter < 5 ; Local_u8SecCounter++)
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	85 30       	cpi	r24, 0x05	; 5
    1920:	10 f3       	brcs	.-60     	; 0x18e6 <APP_voidBlinkYellowCarAndHumanLed+0xe>
		LED_u8TurnOffLed(CAR_LED_PORT , CAR_LED_YELLOW);
		LED_u8TurnOffLed(HUMAN_LED_PORT , HUMAN_LED_YELLOW);
		Timer0_mDelay(500);

	}
}
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <APP_voidCarTurnOnOffGreenLed>:

/**********************************************************************************/
/* Description     : A function to either turn on or off green led of car traffic */
/* 					 light based on state passed to the function				  */
void APP_voidCarTurnOnOffGreenLed(u8 Copy_u8State)
{
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	0f 92       	push	r0
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == TurnON)
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	29 f4       	brne	.+10     	; 0x1946 <APP_voidCarTurnOnOffGreenLed+0x1c>
	{
		LED_u8TurnOnLed(CAR_LED_PORT , CAR_LED_GREEN);
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	62 e0       	ldi	r22, 0x02	; 2
    1940:	0e 94 ef 0b 	call	0x17de	; 0x17de <LED_u8TurnOnLed>
    1944:	04 c0       	rjmp	.+8      	; 0x194e <APP_voidCarTurnOnOffGreenLed+0x24>
	}
	else
	{
		LED_u8TurnOffLed(CAR_LED_PORT , CAR_LED_GREEN);
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	62 e0       	ldi	r22, 0x02	; 2
    194a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LED_u8TurnOffLed>
	}
	/* Set Car Green LED Current State */
	GreenLedState = Copy_u8State;
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	80 93 6d 01 	sts	0x016D, r24
}
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <APP_voidCarTurnOnOffRedLed>:

/**********************************************************************************/
/* Description     : A function to either turn on or off red led of car traffic   */
/* 					 light based on state passed to the function				  */
void APP_voidCarTurnOnOffRedLed(u8 Copy_u8State)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	0f 92       	push	r0
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == TurnON)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	29 f4       	brne	.+10     	; 0x1978 <APP_voidCarTurnOnOffRedLed+0x1c>
	{
		LED_u8TurnOnLed(CAR_LED_PORT , CAR_LED_RED);
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	0e 94 ef 0b 	call	0x17de	; 0x17de <LED_u8TurnOnLed>
    1976:	04 c0       	rjmp	.+8      	; 0x1980 <APP_voidCarTurnOnOffRedLed+0x24>
	}
	else
	{
		LED_u8TurnOffLed(CAR_LED_PORT , CAR_LED_RED);
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	60 e0       	ldi	r22, 0x00	; 0
    197c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LED_u8TurnOffLed>
	}
	/* Set Car Red LED Current State */
	RedLedState = Copy_u8State;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	80 93 6e 01 	sts	0x016E, r24
}
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <APP_voidHumanTurnOnOffGreenLed>:

/**********************************************************************************/
/* Description     : A function to either turn on or off green led of Pedestrians */
/* 					 traffic light based on state passed to the function	   	  */
void APP_voidHumanTurnOnOffGreenLed(u8 Copy_u8State)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	0f 92       	push	r0
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == TurnON)
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	29 f4       	brne	.+10     	; 0x19aa <APP_voidHumanTurnOnOffGreenLed+0x1c>
	{
		LED_u8TurnOnLed(HUMAN_LED_PORT , HUMAN_LED_GREEN);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	62 e0       	ldi	r22, 0x02	; 2
    19a4:	0e 94 ef 0b 	call	0x17de	; 0x17de <LED_u8TurnOnLed>
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <APP_voidHumanTurnOnOffGreenLed+0x24>
	}
	else
	{
		LED_u8TurnOffLed(HUMAN_LED_PORT , HUMAN_LED_GREEN);
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	62 e0       	ldi	r22, 0x02	; 2
    19ae:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LED_u8TurnOffLed>
	}
}
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <APP_voidHumanTurnOnOffRedLed>:


/**********************************************************************************/
/* Description     : A function to either turn on or off red led of Pedestrians   */
/* 					 traffic light based on state passed to the function	   	  */
void APP_voidHumanTurnOnOffRedLed(u8 Copy_u8State){
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8State == TurnON)
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	29 f4       	brne	.+10     	; 0x19d6 <APP_voidHumanTurnOnOffRedLed+0x1c>
	{
		LED_u8TurnOnLed(HUMAN_LED_PORT , HUMAN_LED_RED);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	60 e0       	ldi	r22, 0x00	; 0
    19d0:	0e 94 ef 0b 	call	0x17de	; 0x17de <LED_u8TurnOnLed>
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <APP_voidHumanTurnOnOffRedLed+0x24>
	}
	else
	{
		LED_u8TurnOffLed(HUMAN_LED_PORT , HUMAN_LED_RED);
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LED_u8TurnOffLed>
	}
}
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <APP_voidNormalCarMode>:



/**********************************************************************************/
/* Description     : A function to start Normal Mode (Car Traffic Lights)		  */
void APP_voidNormalCarMode(void){
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62



	/* Turn On Car Green Led for 5 Secs */
	APP_voidCarTurnOnOffGreenLed(TurnON); // GREEN LED FOR CARS
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	0e 94 95 0c 	call	0x192a	; 0x192a <APP_voidCarTurnOnOffGreenLed>
	Timer0_mDelay(5000);
    19f4:	88 e8       	ldi	r24, 0x88	; 136
    19f6:	93 e1       	ldi	r25, 0x13	; 19
    19f8:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timer0_mDelay>
	APP_voidCarTurnOnOffGreenLed(TurnOFF); // GREEN LED FOR CARS
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	0e 94 95 0c 	call	0x192a	; 0x192a <APP_voidCarTurnOnOffGreenLed>


	/* Blink Car Yellow Led for 5 Secs */
	APP_voidBlinkYellowCarLed();
    1a02:	0e 94 46 0c 	call	0x188c	; 0x188c <APP_voidBlinkYellowCarLed>



	APP_voidCarTurnOnOffRedLed(TurnON); // Red LED FOR CARS
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	0e 94 ae 0c 	call	0x195c	; 0x195c <APP_voidCarTurnOnOffRedLed>
	Timer0_mDelay(5000);
    1a0c:	88 e8       	ldi	r24, 0x88	; 136
    1a0e:	93 e1       	ldi	r25, 0x13	; 19
    1a10:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timer0_mDelay>
	APP_voidCarTurnOnOffRedLed(TurnOFF); // Red LED FOR CARS
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	0e 94 ae 0c 	call	0x195c	; 0x195c <APP_voidCarTurnOnOffRedLed>


	/* Blink Car Yellow Led for 5 Secs */
	APP_voidBlinkYellowCarLed();
    1a1a:	0e 94 46 0c 	call	0x188c	; 0x188c <APP_voidBlinkYellowCarLed>

}
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <APP_voidNormalHumanMode>:
/**********************************************************************************/




void APP_voidNormalHumanMode(void){
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62

	// if human made a double press on the crosswalk button
	// I expect that the first press will do the action and nothing to be done after the second press.
	GIE_voidDisableGlobal();
    1a2c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <GIE_voidDisableGlobal>



	/********************** FIRST CASE *****************************/

	if(RedLedState == TurnON)
    1a30:	80 91 6e 01 	lds	r24, 0x016E
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	59 f4       	brne	.+22     	; 0x1a4e <APP_voidNormalHumanMode+0x2a>
	{

		// Turn On Pedestrians Green LED for 5 Secs //
		APP_voidCarTurnOnOffRedLed(TurnON);
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	0e 94 ae 0c 	call	0x195c	; 0x195c <APP_voidCarTurnOnOffRedLed>
		APP_voidHumanTurnOnOffGreenLed(TurnON);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	0e 94 c7 0c 	call	0x198e	; 0x198e <APP_voidHumanTurnOnOffGreenLed>
		Timer0_mDelay(5000);
    1a44:	88 e8       	ldi	r24, 0x88	; 136
    1a46:	93 e1       	ldi	r25, 0x13	; 19
    1a48:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timer0_mDelay>
    1a4c:	20 c0       	rjmp	.+64     	; 0x1a8e <APP_voidNormalHumanMode+0x6a>
	}

	/********************** SECOND CASE *****************************/


	else if( (GreenLedState == TurnON) || (YellowLedState == TurnON) )
    1a4e:	80 91 6d 01 	lds	r24, 0x016D
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	21 f0       	breq	.+8      	; 0x1a5e <APP_voidNormalHumanMode+0x3a>
    1a56:	80 91 6c 01 	lds	r24, 0x016C
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	c1 f4       	brne	.+48     	; 0x1a8e <APP_voidNormalHumanMode+0x6a>
	{
		APP_voidCarTurnOnOffGreenLed(TurnOFF);
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	0e 94 95 0c 	call	0x192a	; 0x192a <APP_voidCarTurnOnOffGreenLed>
		APP_voidHumanTurnOnOffRedLed(TurnON);
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <APP_voidHumanTurnOnOffRedLed>

		APP_voidBlinkYellowCarAndHumanLed();
    1a6a:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <APP_voidBlinkYellowCarAndHumanLed>
		APP_voidHumanTurnOnOffRedLed(TurnOFF);
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <APP_voidHumanTurnOnOffRedLed>
		APP_voidCarTurnOnOffGreenLed(TurnOFF);
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	0e 94 95 0c 	call	0x192a	; 0x192a <APP_voidCarTurnOnOffGreenLed>

		APP_voidCarTurnOnOffRedLed(TurnON);
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	0e 94 ae 0c 	call	0x195c	; 0x195c <APP_voidCarTurnOnOffRedLed>
		APP_voidHumanTurnOnOffGreenLed(TurnON);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	0e 94 c7 0c 	call	0x198e	; 0x198e <APP_voidHumanTurnOnOffGreenLed>
		Timer0_mDelay(5000);
    1a86:	88 e8       	ldi	r24, 0x88	; 136
    1a88:	93 e1       	ldi	r25, 0x13	; 19
    1a8a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timer0_mDelay>
	}

	/******************** End of the two states ********************/

	APP_voidCarTurnOnOffRedLed(TurnOFF);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	0e 94 ae 0c 	call	0x195c	; 0x195c <APP_voidCarTurnOnOffRedLed>

	APP_voidBlinkYellowCarAndHumanLed();
    1a94:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <APP_voidBlinkYellowCarAndHumanLed>

	APP_voidHumanTurnOnOffGreenLed(TurnOFF);
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	0e 94 c7 0c 	call	0x198e	; 0x198e <APP_voidHumanTurnOnOffGreenLed>
	APP_voidHumanTurnOnOffRedLed(TurnON);
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <APP_voidHumanTurnOnOffRedLed>
	APP_voidCarTurnOnOffGreenLed(TurnON);
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	0e 94 95 0c 	call	0x192a	; 0x192a <APP_voidCarTurnOnOffGreenLed>
	Timer0_mDelay(5000);
    1aaa:	88 e8       	ldi	r24, 0x88	; 136
    1aac:	93 e1       	ldi	r25, 0x13	; 19
    1aae:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timer0_mDelay>
	APP_voidHumanTurnOnOffRedLed(TurnOFF);
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <APP_voidHumanTurnOnOffRedLed>
	APP_voidCarTurnOnOffGreenLed(TurnOFF);
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	0e 94 95 0c 	call	0x192a	; 0x192a <APP_voidCarTurnOnOffGreenLed>

	GIE_voidEnableGlobal();
    1abe:	0e 94 c7 08 	call	0x118e	; 0x118e <GIE_voidEnableGlobal>
}
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <DIO_Test1>:

#include"util/delay.h"
#include"DIO_interface.h"

/* Test DIO_u8SetPinValue Function*/
void DIO_Test1(void){
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(1,7,1);
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	67 e0       	ldi	r22, 0x07	; 7
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 41 0a 	call	0x1482	; 0x1482 <DIO_u8SetPinValue>
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <DIO_Test2>:
/***********************************************************/

/* Test DIO_u8TogglePin Function*/
void DIO_Test2(void){
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	60 97       	sbiw	r28, 0x10	; 16
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
	for(short i =0;i<5;i++){
    1af4:	18 8a       	std	Y+16, r1	; 0x10
    1af6:	1f 86       	std	Y+15, r1	; 0x0f
    1af8:	7b c0       	rjmp	.+246    	; 0x1bf0 <DIO_Test2+0x110>
	DIO_u8TogglePin(1,7);
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	67 e0       	ldi	r22, 0x07	; 7
    1afe:	0e 94 bd 09 	call	0x137a	; 0x137a <DIO_u8TogglePin>
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	aa ef       	ldi	r26, 0xFA	; 250
    1b08:	b3 e4       	ldi	r27, 0x43	; 67
    1b0a:	8b 87       	std	Y+11, r24	; 0x0b
    1b0c:	9c 87       	std	Y+12, r25	; 0x0c
    1b0e:	ad 87       	std	Y+13, r26	; 0x0d
    1b10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a e7       	ldi	r20, 0x7A	; 122
    1b20:	53 e4       	ldi	r21, 0x43	; 67
    1b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	8f 83       	std	Y+7, r24	; 0x07
    1b2c:	98 87       	std	Y+8, r25	; 0x08
    1b2e:	a9 87       	std	Y+9, r26	; 0x09
    1b30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b32:	6f 81       	ldd	r22, Y+7	; 0x07
    1b34:	78 85       	ldd	r23, Y+8	; 0x08
    1b36:	89 85       	ldd	r24, Y+9	; 0x09
    1b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e8       	ldi	r20, 0x80	; 128
    1b40:	5f e3       	ldi	r21, 0x3F	; 63
    1b42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b46:	88 23       	and	r24, r24
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <DIO_Test2+0x74>
		__ticks = 1;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	3f c0       	rjmp	.+126    	; 0x1bd2 <DIO_Test2+0xf2>
	else if (__tmp > 65535)
    1b54:	6f 81       	ldd	r22, Y+7	; 0x07
    1b56:	78 85       	ldd	r23, Y+8	; 0x08
    1b58:	89 85       	ldd	r24, Y+9	; 0x09
    1b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	4f e7       	ldi	r20, 0x7F	; 127
    1b62:	57 e4       	ldi	r21, 0x47	; 71
    1b64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	4c f5       	brge	.+82     	; 0x1bbe <DIO_Test2+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	51 e4       	ldi	r21, 0x41	; 65
    1b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	bc 01       	movw	r22, r24
    1b86:	cd 01       	movw	r24, r26
    1b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	9e 83       	std	Y+6, r25	; 0x06
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	0f c0       	rjmp	.+30     	; 0x1bb4 <DIO_Test2+0xd4>
    1b96:	89 e1       	ldi	r24, 0x19	; 25
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9c 83       	std	Y+4, r25	; 0x04
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <DIO_Test2+0xc2>
    1ba6:	9c 83       	std	Y+4, r25	; 0x04
    1ba8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	9e 81       	ldd	r25, Y+6	; 0x06
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	69 f7       	brne	.-38     	; 0x1b96 <DIO_Test2+0xb6>
    1bbc:	14 c0       	rjmp	.+40     	; 0x1be6 <DIO_Test2+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc0:	78 85       	ldd	r23, Y+8	; 0x08
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd6:	9a 83       	std	Y+2, r25	; 0x02
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <DIO_Test2+0xfe>
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
}
/***********************************************************/

/* Test DIO_u8TogglePin Function*/
void DIO_Test2(void){
	for(short i =0;i<5;i++){
    1be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be8:	98 89       	ldd	r25, Y+16	; 0x10
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	98 8b       	std	Y+16, r25	; 0x10
    1bee:	8f 87       	std	Y+15, r24	; 0x0f
    1bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf2:	98 89       	ldd	r25, Y+16	; 0x10
    1bf4:	85 30       	cpi	r24, 0x05	; 5
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	0c f4       	brge	.+2      	; 0x1bfc <DIO_Test2+0x11c>
    1bfa:	7f cf       	rjmp	.-258    	; 0x1afa <DIO_Test2+0x1a>
	DIO_u8TogglePin(1,7);
	_delay_ms(500);
	}
}
    1bfc:	60 96       	adiw	r28, 0x10	; 16
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <DIO_Test3>:
/***********************************************************/

/* Test DIO_u8GetPinValue Function*/
void DIO_Test3(void){
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(1,6,1);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	66 e0       	ldi	r22, 0x06	; 6
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 41 0a 	call	0x1482	; 0x1482 <DIO_u8SetPinValue>
	if( DIO_u8GetPinValue(1,6) == 1){
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	66 e0       	ldi	r22, 0x06	; 6
    1c24:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <DIO_u8GetPinValue>
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	29 f4       	brne	.+10     	; 0x1c36 <DIO_Test3+0x28>
		DIO_u8SetPinValue(1,7,1);
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	67 e0       	ldi	r22, 0x07	; 7
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 41 0a 	call	0x1482	; 0x1482 <DIO_u8SetPinValue>
	}
}
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <EXTI_Test>:
#include"../DIO/DIO_interface.h"
#include"util/delay.h"

// if we press the EXTI button

void EXTI_Test(void){
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62

	DIO_u8TogglePin(1,7);
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	67 e0       	ldi	r22, 0x07	; 7
    1c48:	0e 94 bd 09 	call	0x137a	; 0x137a <DIO_u8TogglePin>
}
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <Timer_Test>:
#define TIMER_TESTFUNC_H_

#include"../DIO/DIO_interface.h"
#include"Timer.h"

void Timer_Test(void){
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62

		DIO_u8TogglePin(1,7);
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	67 e0       	ldi	r22, 0x07	; 7
    1c5e:	0e 94 bd 09 	call	0x137a	; 0x137a <DIO_u8TogglePin>
		Timer0_mDelay(500);
    1c62:	84 ef       	ldi	r24, 0xF4	; 244
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timer0_mDelay>

}
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <LED_Test1>:
#include"LED_interface.h"
#include"LED_config.h"
#include"util/delay.h"

/*Test case LED ON*/
void LED_Test1(void){
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
	LED_u8TurnOnLed(1,7);
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	67 e0       	ldi	r22, 0x07	; 7
    1c7c:	0e 94 ef 0b 	call	0x17de	; 0x17de <LED_u8TurnOnLed>
}
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <LED_Test2>:

/*Test case LED OFF*/
void LED_Test2(void){
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	2e 97       	sbiw	r28, 0x0e	; 14
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
	LED_u8TurnOnLed(1,7);
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	67 e0       	ldi	r22, 0x07	; 7
    1c9e:	0e 94 ef 0b 	call	0x17de	; 0x17de <LED_u8TurnOnLed>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	aa e7       	ldi	r26, 0x7A	; 122
    1ca8:	b4 e4       	ldi	r27, 0x44	; 68
    1caa:	8b 87       	std	Y+11, r24	; 0x0b
    1cac:	9c 87       	std	Y+12, r25	; 0x0c
    1cae:	ad 87       	std	Y+13, r26	; 0x0d
    1cb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a e7       	ldi	r20, 0x7A	; 122
    1cc0:	53 e4       	ldi	r21, 0x43	; 67
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	8f 83       	std	Y+7, r24	; 0x07
    1ccc:	98 87       	std	Y+8, r25	; 0x08
    1cce:	a9 87       	std	Y+9, r26	; 0x09
    1cd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd4:	78 85       	ldd	r23, Y+8	; 0x08
    1cd6:	89 85       	ldd	r24, Y+9	; 0x09
    1cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <LED_Test2+0x6e>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <LED_Test2+0xec>
	else if (__tmp > 65535)
    1cf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf6:	78 85       	ldd	r23, Y+8	; 0x08
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <LED_Test2+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <LED_Test2+0xce>
    1d36:	89 e1       	ldi	r24, 0x19	; 25
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LED_Test2+0xbc>
    1d46:	9c 83       	std	Y+4, r25	; 0x04
    1d48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <LED_Test2+0xb0>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <LED_Test2+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d60:	78 85       	ldd	r23, Y+8	; 0x08
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LED_Test2+0xf8>
    1d82:	9a 83       	std	Y+2, r25	; 0x02
    1d84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LED_u8TurnOffLed(1,7);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	67 e0       	ldi	r22, 0x07	; 7
    1d8a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <LED_u8TurnOffLed>
}
    1d8e:	2e 96       	adiw	r28, 0x0e	; 14
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <LED_Test3>:

/*Test case LED TOGGLE*/
void LED_Test3(void){
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	6e 97       	sbiw	r28, 0x1e	; 30
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
	for(short i=0;i<10;i++){
    1db4:	1e 8e       	std	Y+30, r1	; 0x1e
    1db6:	1d 8e       	std	Y+29, r1	; 0x1d
    1db8:	f1 c0       	rjmp	.+482    	; 0x1f9c <LED_Test3+0x1fc>
	LED_u8ToggleLed(1,7);
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	67 e0       	ldi	r22, 0x07	; 7
    1dbe:	0e 94 0d 0c 	call	0x181a	; 0x181a <LED_u8ToggleLed>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	aa ef       	ldi	r26, 0xFA	; 250
    1dc8:	b3 e4       	ldi	r27, 0x43	; 67
    1dca:	89 8f       	std	Y+25, r24	; 0x19
    1dcc:	9a 8f       	std	Y+26, r25	; 0x1a
    1dce:	ab 8f       	std	Y+27, r26	; 0x1b
    1dd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	4a e7       	ldi	r20, 0x7A	; 122
    1de0:	53 e4       	ldi	r21, 0x43	; 67
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8d 8b       	std	Y+21, r24	; 0x15
    1dec:	9e 8b       	std	Y+22, r25	; 0x16
    1dee:	af 8b       	std	Y+23, r26	; 0x17
    1df0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1df2:	6d 89       	ldd	r22, Y+21	; 0x15
    1df4:	7e 89       	ldd	r23, Y+22	; 0x16
    1df6:	8f 89       	ldd	r24, Y+23	; 0x17
    1df8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <LED_Test3+0x74>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9c 8b       	std	Y+20, r25	; 0x14
    1e10:	8b 8b       	std	Y+19, r24	; 0x13
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <LED_Test3+0xf2>
	else if (__tmp > 65535)
    1e14:	6d 89       	ldd	r22, Y+21	; 0x15
    1e16:	7e 89       	ldd	r23, Y+22	; 0x16
    1e18:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	3f ef       	ldi	r19, 0xFF	; 255
    1e20:	4f e7       	ldi	r20, 0x7F	; 127
    1e22:	57 e4       	ldi	r21, 0x47	; 71
    1e24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e28:	18 16       	cp	r1, r24
    1e2a:	4c f5       	brge	.+82     	; 0x1e7e <LED_Test3+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e2       	ldi	r20, 0x20	; 32
    1e3a:	51 e4       	ldi	r21, 0x41	; 65
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9c 8b       	std	Y+20, r25	; 0x14
    1e52:	8b 8b       	std	Y+19, r24	; 0x13
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <LED_Test3+0xd4>
    1e56:	89 e1       	ldi	r24, 0x19	; 25
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9a 8b       	std	Y+18, r25	; 0x12
    1e5c:	89 8b       	std	Y+17, r24	; 0x11
    1e5e:	89 89       	ldd	r24, Y+17	; 0x11
    1e60:	9a 89       	ldd	r25, Y+18	; 0x12
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LED_Test3+0xc2>
    1e66:	9a 8b       	std	Y+18, r25	; 0x12
    1e68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	9c 8b       	std	Y+20, r25	; 0x14
    1e72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e74:	8b 89       	ldd	r24, Y+19	; 0x13
    1e76:	9c 89       	ldd	r25, Y+20	; 0x14
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	69 f7       	brne	.-38     	; 0x1e56 <LED_Test3+0xb6>
    1e7c:	14 c0       	rjmp	.+40     	; 0x1ea6 <LED_Test3+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e80:	7e 89       	ldd	r23, Y+22	; 0x16
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9c 8b       	std	Y+20, r25	; 0x14
    1e90:	8b 8b       	std	Y+19, r24	; 0x13
    1e92:	8b 89       	ldd	r24, Y+19	; 0x13
    1e94:	9c 89       	ldd	r25, Y+20	; 0x14
    1e96:	98 8b       	std	Y+16, r25	; 0x10
    1e98:	8f 87       	std	Y+15, r24	; 0x0f
    1e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e9c:	98 89       	ldd	r25, Y+16	; 0x10
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <LED_Test3+0xfe>
    1ea2:	98 8b       	std	Y+16, r25	; 0x10
    1ea4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LED_u8ToggleLed(1,7);
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	67 e0       	ldi	r22, 0x07	; 7
    1eaa:	0e 94 0d 0c 	call	0x181a	; 0x181a <LED_u8ToggleLed>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	aa ef       	ldi	r26, 0xFA	; 250
    1eb4:	b3 e4       	ldi	r27, 0x43	; 67
    1eb6:	8b 87       	std	Y+11, r24	; 0x0b
    1eb8:	9c 87       	std	Y+12, r25	; 0x0c
    1eba:	ad 87       	std	Y+13, r26	; 0x0d
    1ebc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4a e7       	ldi	r20, 0x7A	; 122
    1ecc:	53 e4       	ldi	r21, 0x43	; 67
    1ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	8f 83       	std	Y+7, r24	; 0x07
    1ed8:	98 87       	std	Y+8, r25	; 0x08
    1eda:	a9 87       	std	Y+9, r26	; 0x09
    1edc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ede:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee0:	78 85       	ldd	r23, Y+8	; 0x08
    1ee2:	89 85       	ldd	r24, Y+9	; 0x09
    1ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <LED_Test3+0x160>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9e 83       	std	Y+6, r25	; 0x06
    1efc:	8d 83       	std	Y+5, r24	; 0x05
    1efe:	3f c0       	rjmp	.+126    	; 0x1f7e <LED_Test3+0x1de>
	else if (__tmp > 65535)
    1f00:	6f 81       	ldd	r22, Y+7	; 0x07
    1f02:	78 85       	ldd	r23, Y+8	; 0x08
    1f04:	89 85       	ldd	r24, Y+9	; 0x09
    1f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	4f e7       	ldi	r20, 0x7F	; 127
    1f0e:	57 e4       	ldi	r21, 0x47	; 71
    1f10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f14:	18 16       	cp	r1, r24
    1f16:	4c f5       	brge	.+82     	; 0x1f6a <LED_Test3+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e2       	ldi	r20, 0x20	; 32
    1f26:	51 e4       	ldi	r21, 0x41	; 65
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <LED_Test3+0x1c0>
    1f42:	89 e1       	ldi	r24, 0x19	; 25
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9c 83       	std	Y+4, r25	; 0x04
    1f48:	8b 83       	std	Y+3, r24	; 0x03
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LED_Test3+0x1ae>
    1f52:	9c 83       	std	Y+4, r25	; 0x04
    1f54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	9e 83       	std	Y+6, r25	; 0x06
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	69 f7       	brne	.-38     	; 0x1f42 <LED_Test3+0x1a2>
    1f68:	14 c0       	rjmp	.+40     	; 0x1f92 <LED_Test3+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	9a 83       	std	Y+2, r25	; 0x02
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LED_Test3+0x1ea>
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	89 83       	std	Y+1, r24	; 0x01
	LED_u8TurnOffLed(1,7);
}

/*Test case LED TOGGLE*/
void LED_Test3(void){
	for(short i=0;i<10;i++){
    1f92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f96:	01 96       	adiw	r24, 0x01	; 1
    1f98:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fa0:	8a 30       	cpi	r24, 0x0A	; 10
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	0c f4       	brge	.+2      	; 0x1fa8 <LED_Test3+0x208>
    1fa6:	09 cf       	rjmp	.-494    	; 0x1dba <LED_Test3+0x1a>
	LED_u8ToggleLed(1,7);
	_delay_ms(500);
	LED_u8ToggleLed(1,7);
	_delay_ms(500);
	}
}
    1fa8:	6e 96       	adiw	r28, 0x1e	; 30
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <main>:


/// the main application ///

int main()
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62

	AppInit();
    1fc2:	0e 94 2a 0c 	call	0x1854	; 0x1854 <AppInit>

	while(1){
		AppStart();
    1fc6:	0e 94 3d 0c 	call	0x187a	; 0x187a <AppStart>
    1fca:	fd cf       	rjmp	.-6      	; 0x1fc6 <main+0xc>

00001fcc <__prologue_saves__>:
    1fcc:	2f 92       	push	r2
    1fce:	3f 92       	push	r3
    1fd0:	4f 92       	push	r4
    1fd2:	5f 92       	push	r5
    1fd4:	6f 92       	push	r6
    1fd6:	7f 92       	push	r7
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	ca 1b       	sub	r28, r26
    1ff6:	db 0b       	sbc	r29, r27
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	09 94       	ijmp

00002004 <__epilogue_restores__>:
    2004:	2a 88       	ldd	r2, Y+18	; 0x12
    2006:	39 88       	ldd	r3, Y+17	; 0x11
    2008:	48 88       	ldd	r4, Y+16	; 0x10
    200a:	5f 84       	ldd	r5, Y+15	; 0x0f
    200c:	6e 84       	ldd	r6, Y+14	; 0x0e
    200e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2010:	8c 84       	ldd	r8, Y+12	; 0x0c
    2012:	9b 84       	ldd	r9, Y+11	; 0x0b
    2014:	aa 84       	ldd	r10, Y+10	; 0x0a
    2016:	b9 84       	ldd	r11, Y+9	; 0x09
    2018:	c8 84       	ldd	r12, Y+8	; 0x08
    201a:	df 80       	ldd	r13, Y+7	; 0x07
    201c:	ee 80       	ldd	r14, Y+6	; 0x06
    201e:	fd 80       	ldd	r15, Y+5	; 0x05
    2020:	0c 81       	ldd	r16, Y+4	; 0x04
    2022:	1b 81       	ldd	r17, Y+3	; 0x03
    2024:	aa 81       	ldd	r26, Y+2	; 0x02
    2026:	b9 81       	ldd	r27, Y+1	; 0x01
    2028:	ce 0f       	add	r28, r30
    202a:	d1 1d       	adc	r29, r1
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	ed 01       	movw	r28, r26
    2038:	08 95       	ret

0000203a <ceil>:
    203a:	3b d0       	rcall	.+118    	; 0x20b2 <__fp_trunc>
    203c:	80 f0       	brcs	.+32     	; 0x205e <ceil+0x24>
    203e:	9f 37       	cpi	r25, 0x7F	; 127
    2040:	40 f4       	brcc	.+16     	; 0x2052 <ceil+0x18>
    2042:	91 11       	cpse	r25, r1
    2044:	0e f4       	brtc	.+2      	; 0x2048 <ceil+0xe>
    2046:	4d c0       	rjmp	.+154    	; 0x20e2 <__fp_szero>
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	80 e8       	ldi	r24, 0x80	; 128
    204e:	9f e3       	ldi	r25, 0x3F	; 63
    2050:	08 95       	ret
    2052:	26 f0       	brts	.+8      	; 0x205c <ceil+0x22>
    2054:	1b 16       	cp	r1, r27
    2056:	61 1d       	adc	r22, r1
    2058:	71 1d       	adc	r23, r1
    205a:	81 1d       	adc	r24, r1
    205c:	01 c0       	rjmp	.+2      	; 0x2060 <__fp_mintl>
    205e:	1b c0       	rjmp	.+54     	; 0x2096 <__fp_mpack>

00002060 <__fp_mintl>:
    2060:	88 23       	and	r24, r24
    2062:	71 f4       	brne	.+28     	; 0x2080 <__fp_mintl+0x20>
    2064:	77 23       	and	r23, r23
    2066:	21 f0       	breq	.+8      	; 0x2070 <__fp_mintl+0x10>
    2068:	98 50       	subi	r25, 0x08	; 8
    206a:	87 2b       	or	r24, r23
    206c:	76 2f       	mov	r23, r22
    206e:	07 c0       	rjmp	.+14     	; 0x207e <__fp_mintl+0x1e>
    2070:	66 23       	and	r22, r22
    2072:	11 f4       	brne	.+4      	; 0x2078 <__fp_mintl+0x18>
    2074:	99 27       	eor	r25, r25
    2076:	0d c0       	rjmp	.+26     	; 0x2092 <__fp_mintl+0x32>
    2078:	90 51       	subi	r25, 0x10	; 16
    207a:	86 2b       	or	r24, r22
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	2a f0       	brmi	.+10     	; 0x208c <__fp_mintl+0x2c>
    2082:	9a 95       	dec	r25
    2084:	66 0f       	add	r22, r22
    2086:	77 1f       	adc	r23, r23
    2088:	88 1f       	adc	r24, r24
    208a:	da f7       	brpl	.-10     	; 0x2082 <__fp_mintl+0x22>
    208c:	88 0f       	add	r24, r24
    208e:	96 95       	lsr	r25
    2090:	87 95       	ror	r24
    2092:	97 f9       	bld	r25, 7
    2094:	08 95       	ret

00002096 <__fp_mpack>:
    2096:	9f 3f       	cpi	r25, 0xFF	; 255
    2098:	31 f0       	breq	.+12     	; 0x20a6 <__fp_mpack_finite+0xc>

0000209a <__fp_mpack_finite>:
    209a:	91 50       	subi	r25, 0x01	; 1
    209c:	20 f4       	brcc	.+8      	; 0x20a6 <__fp_mpack_finite+0xc>
    209e:	87 95       	ror	r24
    20a0:	77 95       	ror	r23
    20a2:	67 95       	ror	r22
    20a4:	b7 95       	ror	r27
    20a6:	88 0f       	add	r24, r24
    20a8:	91 1d       	adc	r25, r1
    20aa:	96 95       	lsr	r25
    20ac:	87 95       	ror	r24
    20ae:	97 f9       	bld	r25, 7
    20b0:	08 95       	ret

000020b2 <__fp_trunc>:
    20b2:	25 d0       	rcall	.+74     	; 0x20fe <__fp_splitA>
    20b4:	a0 f0       	brcs	.+40     	; 0x20de <__fp_trunc+0x2c>
    20b6:	be e7       	ldi	r27, 0x7E	; 126
    20b8:	b9 17       	cp	r27, r25
    20ba:	88 f4       	brcc	.+34     	; 0x20de <__fp_trunc+0x2c>
    20bc:	bb 27       	eor	r27, r27
    20be:	9f 38       	cpi	r25, 0x8F	; 143
    20c0:	60 f4       	brcc	.+24     	; 0x20da <__fp_trunc+0x28>
    20c2:	16 16       	cp	r1, r22
    20c4:	b1 1d       	adc	r27, r1
    20c6:	67 2f       	mov	r22, r23
    20c8:	78 2f       	mov	r23, r24
    20ca:	88 27       	eor	r24, r24
    20cc:	98 5f       	subi	r25, 0xF8	; 248
    20ce:	f7 cf       	rjmp	.-18     	; 0x20be <__fp_trunc+0xc>
    20d0:	86 95       	lsr	r24
    20d2:	77 95       	ror	r23
    20d4:	67 95       	ror	r22
    20d6:	b1 1d       	adc	r27, r1
    20d8:	93 95       	inc	r25
    20da:	96 39       	cpi	r25, 0x96	; 150
    20dc:	c8 f3       	brcs	.-14     	; 0x20d0 <__fp_trunc+0x1e>
    20de:	08 95       	ret

000020e0 <__fp_zero>:
    20e0:	e8 94       	clt

000020e2 <__fp_szero>:
    20e2:	bb 27       	eor	r27, r27
    20e4:	66 27       	eor	r22, r22
    20e6:	77 27       	eor	r23, r23
    20e8:	cb 01       	movw	r24, r22
    20ea:	97 f9       	bld	r25, 7
    20ec:	08 95       	ret

000020ee <__fp_split3>:
    20ee:	57 fd       	sbrc	r21, 7
    20f0:	90 58       	subi	r25, 0x80	; 128
    20f2:	44 0f       	add	r20, r20
    20f4:	55 1f       	adc	r21, r21
    20f6:	59 f0       	breq	.+22     	; 0x210e <__fp_splitA+0x10>
    20f8:	5f 3f       	cpi	r21, 0xFF	; 255
    20fa:	71 f0       	breq	.+28     	; 0x2118 <__fp_splitA+0x1a>
    20fc:	47 95       	ror	r20

000020fe <__fp_splitA>:
    20fe:	88 0f       	add	r24, r24
    2100:	97 fb       	bst	r25, 7
    2102:	99 1f       	adc	r25, r25
    2104:	61 f0       	breq	.+24     	; 0x211e <__fp_splitA+0x20>
    2106:	9f 3f       	cpi	r25, 0xFF	; 255
    2108:	79 f0       	breq	.+30     	; 0x2128 <__fp_splitA+0x2a>
    210a:	87 95       	ror	r24
    210c:	08 95       	ret
    210e:	12 16       	cp	r1, r18
    2110:	13 06       	cpc	r1, r19
    2112:	14 06       	cpc	r1, r20
    2114:	55 1f       	adc	r21, r21
    2116:	f2 cf       	rjmp	.-28     	; 0x20fc <__fp_split3+0xe>
    2118:	46 95       	lsr	r20
    211a:	f1 df       	rcall	.-30     	; 0x20fe <__fp_splitA>
    211c:	08 c0       	rjmp	.+16     	; 0x212e <__fp_splitA+0x30>
    211e:	16 16       	cp	r1, r22
    2120:	17 06       	cpc	r1, r23
    2122:	18 06       	cpc	r1, r24
    2124:	99 1f       	adc	r25, r25
    2126:	f1 cf       	rjmp	.-30     	; 0x210a <__fp_splitA+0xc>
    2128:	86 95       	lsr	r24
    212a:	71 05       	cpc	r23, r1
    212c:	61 05       	cpc	r22, r1
    212e:	08 94       	sec
    2130:	08 95       	ret

00002132 <_exit>:
    2132:	f8 94       	cli

00002134 <__stop_program>:
    2134:	ff cf       	rjmp	.-2      	; 0x2134 <__stop_program>
